Class resources
    github
    syllabus
    schedule is day to day activity. Mostly follows it in class.

Tools
    XC32 v 2.05
    Harmony v
    Microchip IDE v
    Eagle v
    PIC32MX250F128B


Download the lastest XC32 compiler and Harmony versions.
Create new IDE projects inside the git repo folder.

Thursday is video of breadboard
next tuesday is eagle schematic

All equipment becomes student owned

We will be using external batteries for the first time here. This creates safety issues, including that it must not be crossed with the phone.

Speed
Looks
Dangerousness

Homeworks are not really worth points, you generally just get an A in the class as long as you do reasonably. Due dates are mostly for personal timekeeping. I should try to keep up but not stress.



Wednesday,Thursday,and Friday have busy class schedules
OH is here, listed on door. Free to work whenever there is no class.



Tito's Tip Corner
    Android was bulky and slow



Building Equipment
    Pololu USB mini-B breakout
    3.3V regulator
    2x 1uF capacitors
    2x 10uF capacitor (tantalum)
    2x LED (red)
    2x 330 ohm resistor
    2x pushbutton
    2x 10kOhm resistor
    PICkit3
    Header pins for the PICkit
    PIC32MX250F128B
    8MHz crystal resonator
    1 kOhm resistor
    6x .1uF capacitors








Git Commits
    The commit tracking is pretty granular, and can be used by both myself and others in evaluating my workflow. Generally, people like to see dark green commit boxes in your work history. I don't think commits track actual work done, so it makes most sense to commit very frequently. Questions: If you push less frequently than you commit, does it update the history?



PIC32 notes
    slower and with less memory than the NU32 setup. It has fewer pins, but the pins are programmable, they aren't function locked.
    3.3 V supply, but USB is 5V. We'll be using a regulator to avoid the current supply issue with a voltage divider. The regulator works on the same averaged voltage concept that we've been using for things like PWM. The voltage regulator should never be hot. It is entirely possible to short your computer if you fuck this up.

USB mini-B breakout board
    ID is connected to ground via the housing when you plug a cable in. Only used by devices, not the host(?).


Pic pin outs, all Vss go to ground, Vdd go to power, with a capacitor between them. Check the Recommended Minimum Connection page. MCLR is the clear pin, it resets the pic whenever connected to ground. We'll be adding a button there.
 Tantalum capacitors for the internal voltage regulator have a polarity.
Using PGEC and PGED 1 for the programmer.

Table 11-2 shows how to set pin functions.

Using an external clock to speed up the PIC (internal clock can produce temperature issues and distortion), which we connect to OSC1 and OSC2.


Power, Comms, osscillation, USB, and an LED


The starting lines in the example code is the ground level version of the PIC32 startup function. CPU speed runs at clock speed, so no pre-caching here.
All pragma variables must be set as described in 32mx250f128b.html in the docs folder of your xc32 installation.
DEVCFG1 pragmas are board settings
DEVCFG2 pragmas are clock related


I guess it's okay for schematics to be ugly hand drawings.
Don't forget to use the core_timer value+whatever to prevent interference and the button debouncing technique.
